blueprint:
  name: "Chamber Heater Auto Control (BLP1S)"
  description: >
    Automatically turns the chamber heater ON when printing with materials like ABS/ASA/etc.,
    and OFF after 10 minutes of idle time. Uses case-insensitive regex to match materials.
  domain: automation
  input:
    heater_switch:
      name: Chamber Heater Switch
      selector:
        entity:
          domain: switch
    printer_status:
      name: Printer Status Sensor
      selector:
        entity:
          domain: sensor
    filament_tray:
      name: Filament Tray Sensor
      selector:
        entity:
          domain: sensor
    last_on_time:
      name: Last Heater ON Timestamp (input_datetime)
      selector:
        entity:
          domain: input_datetime
    heater_materials:
      name: Heater Materials (Regex)
      description: >
        Regex pattern (case-insensitive) to detect filament types that need chamber heating.
        Example: "abs|asa|pc|pa|hips|cf"
      default: "abs|asa|pc|pa|hips|cf"
      selector:
        text:

mode: single

trigger:
  - platform: time_pattern
    minutes: "/5"

variables:
  heater: !input heater_switch
  tray: !input filament_tray
  status: !input printer_status
  last_on: !input last_on_time
  pattern: !input heater_materials

  material: "{{ states(tray) | default('', true) }}"
  print_status: "{{ states(status) | lower | default('unknown') }}"
  is_printing: "{{ print_status == 'running' }}"
  is_idle: "{{ print_status in ['idle', 'completed', 'finished'] }}"

  needs_heater: >
    {{ material not in ['UNAVAILABLE', 'UNKNOWN', ''] and
       material | regex_search(pattern, ignorecase=True) }}

  now_time: "{{ now().isoformat() }}"
  last_on_secs_ago: >
    {{
      (now() - (states(last_on) | as_datetime(default=now() - timedelta(minutes=11)))).total_seconds()
    }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ is_printing and needs_heater }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ heater }}"
          - service: input_datetime.set_datetime
            data:
              entity_id: "{{ last_on }}"
              datetime: "{{ now_time }}"
          - service: persistent_notification.create
            data:
              title: "Chamber Heater"
              message: "Turned ON due to printing with material: {{ material }}."
      - conditions:
          - condition: template
            value_template: "{{ is_idle and last_on_secs_ago > 600 }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ heater }}"
          - service: persistent_notification.create
            data:
              title: "Chamber Heater"
              message: "Turned OFF after 10-minute cooldown following print."
    default:
      - service: persistent_notification.create
        data:
          title: "Chamber Heater"
          message: "No action taken. Status: {{ print_status }}, Material: {{ material }}."
